# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *
import os

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [worker.Worker("worker1", "pass"),
                worker.Worker("worker2", "pass"),
                worker.Worker("worker3", "pass")
                ]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9990}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = []
c['change_source'].append(changes.GitHubPullrequestPoller(
    owner='key4hep', repo='key4hep-spack',
    branches=['master'],
    pollInterval=3600))
c['change_source'].append(changes.GitHubPullrequestPoller(
    owner='spack', repo='spack',
    branches=['develop'],
    pollInterval=3600))
c['change_source'].append(changes.GitHubPullrequestPoller(
    owner='joequant', repo='key4hep-container',
    branches=['master'],
    pollInterval=3600))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.AnyBranchScheduler(
                            name="all",
                             treeStableTimer=600,
                            builderNames=["trigger-build"]))

c['schedulers'].append(schedulers.Nightly(
                            name="nightly",
                            builderNames=["build-image"],
                            hour=4))

c['schedulers'].append(schedulers.Triggerable(name="image-trigger",
                                  builderNames=["build-image"]))

c['schedulers'].append(schedulers.Triggerable(name="incremental",
                                  builderNames=["run-incremental"]))

c['schedulers'].append(schedulers.Triggerable(name="incremental-nightly",
                                  builderNames=["run-incremental-nightly"]))

#c['schedulers'].append(schedulers.Nightly(
#                            name="nightly",
#                            builderNames=["run-full"],
#                            hour="1"))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["build-image",
                                          "trigger-build",
    "run-incremental",
                                          "run-incremental-nightly",
                                          "run-full",
                                          "test-fail"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

c['builders'] = []
factory = util.BuildFactory()
factory.addStep(steps.Trigger(schedulerNames=['image-trigger'],
                              alwaysUseLatest=True,
                              waitForFinish=False))
c['builders'].append(
    util.BuilderConfig(name="trigger-build",
      workernames=["worker1"],
      factory=factory))


factory = util.BuildFactory()
# check out the source
factory.addStep(steps.Git(repourl='https://github.com/joequant/key4hep-container.git', mode='incremental'))
# run the tests (note that this will require that 'trial' is installed)
factory.addStep(steps.ShellCommand(command=["pnpm", "run", "build"],
                                   haltOnFailure=True))
factory.addStep(steps.Trigger(schedulerNames=['incremental',
                                              'incremental-nightly'],
                                   waitForFinish=True))
c['builders'].append(
    util.BuilderConfig(name="build-image",
      workernames=["worker1"],
      factory=factory))

factory = util.BuildFactory()
factory.addStep(steps.ShellCommand(command=["pnpm", "run", "run-incremental"]))
c['builders'].append(
    util.BuilderConfig(name="run-incremental",
      workernames=["worker1"],
      factory=factory))

factory = util.BuildFactory()
factory.addStep(steps.ShellCommand(command=["exit", "255"]))
c['builders'].append(
    util.BuilderConfig(name="test-fail",
      workernames=["worker1"],
      factory=factory))


# check out the source
factory = util.BuildFactory()
factory.addStep(steps.ShellCommand(command=["pnpm", "run",
                                            "run-incremental-nightly"]))

c['builders'].append(
    util.BuilderConfig(name="run-incremental-nightly",
      workernames=["worker2"],
      factory=factory))

factory = util.BuildFactory()
factory.addStep(steps.ShellCommand(command=["pnpm", "run", "build-stack"]))
c['builders'].append(
    util.BuilderConfig(name="run-full",
      workernames=["worker3"],
      factory=factory))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

template=u'''\
<h4>Build status: {{ summary }}</h4>
<p> Worker used: {{ workername }}</p>
{% for step in build['steps'] %}
<p> {{ step['name'] }}: {{ step['results'] }}</p>
{% endfor %}
<p><b> -- The Buildbot</b></p>
'''
def getresults(props):
    return {"body": ("failed %s" % repr(props))}

script_dir = os.path.dirname(os.path.realpath(__file__))
token = open(os.path.join(script_dir, "token"), 'r').read().strip()
mn = reporters.HttpStatusPush("https://api.github.com/repos/joequant/key4hep-container/issues/1/comments",
                    auth=("joequant", token,),
                    mode=("failing",),
                    format_fn=getresults)

#c['services'].append(mn)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "KEY4HEP Container CI"
c['titleURL'] = "https://github.com/joequant/key4hep-container"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://dev1.bitquant.com.hk:8011/"

# minimalistic config to activate new web UI


authz = util.Authz(
  allowRules=[
    util.AnyControlEndpointMatcher(role="admins"),
  ],
  roleMatchers=[
    util.RolesFromEmails(admins=["admin"])
  ]
)

c['www'] = dict(port='tcp:8011:interface=0.0.0.0',
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))
print (os.path.join(script_dir, ".htpasswd"))
c['www']['auth'] = util.HTPasswdAuth(os.path.join(script_dir, ".htpasswd"))
c['www']['authz'] = authz

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.
    # It's easy to start with sqlite, but it's recommended to switch to a dedicated
    # database, such as PostgreSQL or MySQL, for use in production environments.
    # http://docs.buildbot.net/current/manual/configuration/global.html#database-specification
    'db_url' : "sqlite:///state.sqlite",
}
