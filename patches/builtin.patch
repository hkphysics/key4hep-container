diff --git a/var/spack/repos/builtin/packages/numactl/package.py b/var/spack/repos/builtin/packages/numactl/package.py
index f6c82f5522..d0fe04e53e 100644
--- a/var/spack/repos/builtin/packages/numactl/package.py
+++ b/var/spack/repos/builtin/packages/numactl/package.py
@@ -30,6 +30,7 @@ class Numactl(AutotoolsPackage):
 
     def autoreconf(self, spec, prefix):
         bash = which('bash')
+        bash('libtoolize')
         bash('./autogen.sh')
 
     def patch(self):
diff --git a/var/spack/repos/builtin/packages/emacs/glibc-2.34.patch b/var/spack/repos/builtin/packages/emacs/glibc-2.34.patch
new file mode 100644
index 0000000000..793503db5a
--- /dev/null
+++ b/var/spack/repos/builtin/packages/emacs/glibc-2.34.patch
@@ -0,0 +1,20 @@
+Fix compilation with glibc-2.34
+https://bugs.gentoo.org/803644
+
+In glibc-2.34, definition of SIGSTKSZ has changed from a fixed value
+to sysconf(_SC_SIGSTKSZ), which cannot be used in the definition of a
+static array. In 2.33, the default SIGSTKSZ was 8192, but apparently
+some arches (e.g. aarch64 and sparc) used 16384. Hardcode the larger
+of these values.
+
+--- emacs-27.2/src/sysdep.c
++++ emacs-27.2/src/sysdep.c
+@@ -1818,7 +1818,7 @@
+ 
+ /* Alternate stack used by SIGSEGV handler below.  */
+ 
+-static unsigned char sigsegv_stack[SIGSTKSZ];
++static unsigned char sigsegv_stack[16384];
+ 
+ 
+ /* Return true if SIGINFO indicates a stack overflow.  */
diff --git a/var/spack/repos/builtin/packages/emacs/package.py b/var/spack/repos/builtin/packages/emacs/package.py
index a45d726fd0..c9d708e194 100644
--- a/var/spack/repos/builtin/packages/emacs/package.py
+++ b/var/spack/repos/builtin/packages/emacs/package.py
@@ -61,6 +61,8 @@ class Emacs(AutotoolsPackage, GNUMirrorPackage):
     conflicts('@:26.3', when='platform=darwin os=catalina')
     conflicts('+native', when='@:27', msg="native compilation require @master")
 
+    patch('glibc-2.34.patch')
+
     @when('platform=darwin')
     def setup_build_environment(self, env):
         # on macOS, emacs' config does search hard enough for ncurses'
diff --git a/var/spack/repos/builtin/packages/gaudi/package.py b/var/spack/repos/builtin/packages/gaudi/package.py
index a7d37c8651..a4fc872296 100644
--- a/var/spack/repos/builtin/packages/gaudi/package.py
+++ b/var/spack/repos/builtin/packages/gaudi/package.py
@@ -60,6 +60,7 @@ class Gaudi(CMakePackage):
     depends_on('range-v3')
     depends_on('root +python +root7 +ssl +tbb +threads')
     depends_on('zlib')
+    depends_on('py-pytest', when='@36.9:', type=('build', 'run'))
 
     # todo: this should be a test dependency only,
     depends_on('py-nose', when="@35.0", type=('build', 'run'))
diff --git a/var/spack/repos/builtin/packages/xgboost/package.py b/var/spack/repos/builtin/packages/xgboost/package.py
index 85e9c26de0..5f0062fe47 100644
--- a/var/spack/repos/builtin/packages/xgboost/package.py
+++ b/var/spack/repos/builtin/packages/xgboost/package.py
@@ -45,8 +45,13 @@ def cmake_args(self):
         args = [
             self.define_from_variant('USE_CUDA', 'cuda'),
             self.define_from_variant('USE_NCCL', 'nccl'),
-            self.define_from_variant('USE_OPENMP', 'openmp'),
         ]
+        # disable openmp when using clang
+        # cmake file does not detect openmp correctly for clang
+        if not self.spec.satisfies('%clang'):
+            args.append(self.define_from_variant('USE_OPENMP', 'openmp'))
+        else:
+            args.append('-DUSE_OPENMP=False')
 
         if '+cuda' in self.spec and 'cuda_arch=none' not in self.spec:
             args.append(self.define(
diff --git a/var/spack/repos/builtin/packages/libzmq/package.py b/var/spack/repos/builtin/packages/libzmq/package.py
index e65cefbe28..3fd53ce1ab 100644
--- a/var/spack/repos/builtin/packages/libzmq/package.py
+++ b/var/spack/repos/builtin/packages/libzmq/package.py
@@ -57,6 +57,8 @@ class Libzmq(AutotoolsPackage):
 
     # Fix aggressive compiler warning false positive
     patch('https://github.com/zeromq/libzmq/commit/92b2c38a2c51a1942a380c7ee08147f7b1ca6845.patch?full_index=1', sha256='310b8aa57a8ea77b7ac74debb3bf928cbafdef5e7ca35beaac5d9c61c7edd239', when='@4.2.3:4.3.4 %gcc@11:')
+    # Gcc12 patch fix
+    patch('https://github.com/zeromq/libzmq/commit/a01d259db372bff5e049aa966da4efce7259af67.patch?full_index=1', sha256='edca864cba914481a5c97d2e975ba64ca1d2fbfc0044e9a78c48f1f7b2bedb6f', when='@:4.3.4 %gcc@12:')
 
     def url_for_version(self, version):
         if version <= Version('4.1.4'):
diff --git a/var/spack/repos/builtin/packages/gdb/package.py b/var/spack/repos/builtin/packages/gdb/package.py
index b003baa255..fe80a25f5b 100644
--- a/var/spack/repos/builtin/packages/gdb/package.py
+++ b/var/spack/repos/builtin/packages/gdb/package.py
@@ -19,6 +19,7 @@ class Gdb(AutotoolsPackage, GNUMirrorPackage):
 
     maintainers = ['robertu94']
 
+    version('11.2',   sha256='b558b66084835e43b6361f60d60d314c487447419cdf53adf83a87020c367290')
     version('11.1',   sha256='cc2903474e965a43d09c3b263952d48ced39dd22ce2d01968f3aa181335fcb9c')
     version('10.2',   sha256='b33ad58d687487a821ec8d878daab0f716be60d0936f2e3ac5cf08419ce70350')
     version('10.1',   sha256='f12f388b99e1408c01308c3f753313fafa45517740c81ab7ed0d511b13e2cf55')
diff --git a/var/spack/repos/builtin/packages/davix/package.py b/var/spack/repos/builtin/packages/davix/package.py
index e6750919f2..0a470904e5 100644
--- a/var/spack/repos/builtin/packages/davix/package.py
+++ b/var/spack/repos/builtin/packages/davix/package.py
@@ -10,8 +10,10 @@ class Davix(CMakePackage):
     """High-performance file management over WebDAV/HTTP."""
 
     homepage = "https://davix.web.cern.ch/davix/docs/devel/index.html"
-    url      = "https://github.com/cern-fts/davix/releases/download/R_0_7_6/davix-0.7.6.tar.gz"
+    url      = "https://github.com/cern-fts/davix/releases/download/R_0_8_1/davix-0.8.1.tar.gz"
 
+    version('0.8.1', sha256='3f42f4eadaf560ab80984535ffa096d3e88287d631960b2193e84cf29a5fe3a6')
+    version('0.8.0', sha256='2f108da0408a83fb5b9f0c68150d360ba733e4b3a0fe298d45b0d32d28ab7124')
     version('0.7.6', sha256='a2e7fdff29f7ba247a3bcdb08ab1db6d6ed745de2d3971b46526986caf360673')
     version('0.7.5', sha256='d920ca976846875d83af4dc50c99280bb3741fcf8351d5733453e70fa5fe6fc8')
     version('0.7.3', sha256='cd46276e72c6a0da1e2ad30eb66ec509a4c023687767c62a66713fa8c23d328a')
diff --git a/var/spack/repos/builtin/packages/root/package.py b/var/spack/repos/builtin/packages/root/package.py
index 324fc979b3..94d727f7a2 100644
--- a/var/spack/repos/builtin/packages/root/package.py
+++ b/var/spack/repos/builtin/packages/root/package.py
@@ -80,6 +80,10 @@ class Root(CMakePackage):
     # https://github.com/root-project/ROOT/commit/e0ae0483985d90a71a6cabd10d3622dfd1c15611.
     patch('root7-webgui.patch', level=1, when='@6.16.00')
 
+    # gcc12
+    patch('root-fix-compilation-with-gcc-12.patch', when='@6.26.00%gcc@12')
+    patch('root-fix-test-failure-on-ppc64le-and-aarch64-with-gcc-12.patch', when='@6.26.00%gcc@12')
+
     if sys.platform == 'darwin':
         # Resolve non-standard use of uint, _cf_
         # https://sft.its.cern.ch/jira/browse/ROOT-7886.
diff --git a/var/spack/repos/builtin/packages/root/root-fix-compilation-with-gcc-12.patch b/var/spack/repos/builtin/packages/root/root-fix-compilation-with-gcc-12.patch
new file mode 100644
index 0000000000..2c34516719
--- /dev/null
+++ b/var/spack/repos/builtin/packages/root/root-fix-compilation-with-gcc-12.patch
@@ -0,0 +1,63 @@
+From 3bc55ece1db8b32c5e86fd6b85856addd67265fb Mon Sep 17 00:00:00 2001
+From: Mattias Ellert <mattias.ellert@physics.uu.se>
+Date: Sat, 15 Jan 2022 06:35:58 +0100
+Subject: [PATCH] Fix compilation with gcc 12
+
+Fixes error: use of deleted function
+
+/builddir/build/BUILD/root-6.24.06/interpreter/llvm/src/lib/Target/NVPTX/NVPTXAsmPrinter.cpp: In member function 'std::string llvm::NVPTXAsmPrinter::getPTXFundamentalTypeStr(llvm::Type*, bool) const':
+/builddir/build/BUILD/root-6.24.06/interpreter/llvm/src/lib/Target/NVPTX/NVPTXAsmPrinter.cpp:1319:10: error: use of deleted function 'std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(std::nullptr_t) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::nullptr_t = std::nullptr_t]'
+ 1319 |   return nullptr;
+      |          ^~~~~~~
+In file included from /usr/include/c++/12/string:53,
+                 from /usr/include/c++/12/bits/locale_classes.h:40,
+                 from /usr/include/c++/12/bits/ios_base.h:41,
+                 from /usr/include/c++/12/streambuf:41,
+                 from /usr/include/c++/12/bits/streambuf_iterator.h:35,
+                 from /usr/include/c++/12/iterator:66,
+                 from /builddir/build/BUILD/root-6.24.06/interpreter/llvm/src/include/llvm/ADT/iterator_range.h:21,
+                 from /builddir/build/BUILD/root-6.24.06/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:16,
+                 from /builddir/build/BUILD/root-6.24.06/interpreter/llvm/src/include/llvm/ADT/STLExtras.h:20,
+                 from /builddir/build/BUILD/root-6.24.06/interpreter/llvm/src/include/llvm/ADT/StringRef.h:12,
+                 from /builddir/build/BUILD/root-6.24.06/interpreter/llvm/src/include/llvm/Pass.h:31,
+                 from /builddir/build/BUILD/root-6.24.06/interpreter/llvm/src/lib/Target/NVPTX/NVPTX.h:17,
+                 from /builddir/build/BUILD/root-6.24.06/interpreter/llvm/src/lib/Target/NVPTX/NVPTXAsmPrinter.h:17,
+                 from /builddir/build/BUILD/root-6.24.06/interpreter/llvm/src/lib/Target/NVPTX/NVPTXAsmPrinter.cpp:14:
+/usr/include/c++/12/bits/basic_string.h:732:7: note: declared here
+  732 |       basic_string(nullptr_t) = delete;
+      |       ^~~~~~~~~~~~
+
+Fix backported from LLVM upstrea https://reviews.llvm.org/D87697
+---
+ interpreter/llvm/src/lib/Target/NVPTX/NVPTXAsmPrinter.cpp | 6 ++----
+ 1 file changed, 2 insertions(+), 4 deletions(-)
+
+diff --git a/interpreter/llvm/src/lib/Target/NVPTX/NVPTXAsmPrinter.cpp b/interpreter/llvm/src/lib/Target/NVPTX/NVPTXAsmPrinter.cpp
+index 5f38b4a3c4..bfa74bd98f 100644
+--- a/interpreter/llvm/src/lib/Target/NVPTX/NVPTXAsmPrinter.cpp
++++ b/interpreter/llvm/src/lib/Target/NVPTX/NVPTXAsmPrinter.cpp
+@@ -1281,9 +1281,6 @@ void NVPTXAsmPrinter::emitPTXAddressSpace(unsigned int AddressSpace,
+ std::string
+ NVPTXAsmPrinter::getPTXFundamentalTypeStr(Type *Ty, bool useB4PTR) const {
+   switch (Ty->getTypeID()) {
+-  default:
+-    llvm_unreachable("unexpected type");
+-    break;
+   case Type::IntegerTyID: {
+     unsigned NumBits = cast<IntegerType>(Ty)->getBitWidth();
+     if (NumBits == 1)
+@@ -1314,9 +1311,10 @@ NVPTXAsmPrinter::getPTXFundamentalTypeStr(Type *Ty, bool useB4PTR) const {
+       return "b32";
+     else
+       return "u32";
++  default:
++    break;
+   }
+   llvm_unreachable("unexpected type");
+-  return nullptr;
+ }
+ 
+ void NVPTXAsmPrinter::emitPTXGlobalVariable(const GlobalVariable *GVar,
+-- 
+2.34.1
+
diff --git a/var/spack/repos/builtin/packages/root/root-fix-test-failure-on-ppc64le-and-aarch64-with-gcc-12.patch b/var/spack/repos/builtin/packages/root/root-fix-test-failure-on-ppc64le-and-aarch64-with-gcc-12.patch
new file mode 100644
index 0000000000..007c3cd8a5
--- /dev/null
+++ b/var/spack/repos/builtin/packages/root/root-fix-test-failure-on-ppc64le-and-aarch64-with-gcc-12.patch
@@ -0,0 +1,43 @@
+From ddc155795baa9d4690717c204e54a7fd4600c688 Mon Sep 17 00:00:00 2001
+From: Mattias Ellert <mattias.ellert@physics.uu.se>
+Date: Mon, 17 Jan 2022 18:49:30 +0100
+Subject: [PATCH] Fix test failure on ppc64le and aarch64 with gcc 12
+
+.../hist/hist/test/test_tprofile2poly.cxx:61: Failure
+The difference between cont1 and cont2 is 1.4551915228366852e-11, which exceeds delta, where
+cont1 evaluates to 54886.064319363642,
+cont2 evaluates to 54886.064319363628, and
+delta evaluates to 9.999999960041972e-12.
+.../hist/hist/test/test_tprofile2poly.cxx:61: Failure
+The difference between cont1 and cont2 is 1.4551915228366852e-11, where
+cont1 evaluates to 109868.61342004745,
+cont2 evaluates to 109868.61342004743.
+The abs_error parameter delta evaluates to 9.999999960041972e-12 which is smaller than the minimum distance between doubles for numbers of this magnitude which is 1.4551915228366852e-11, thus making this EXPECT_NEAR check equivalent to EXPECT_EQUAL. Consider using EXPECT_DOUBLE_EQ instead.
+---
+ hist/hist/test/test_tprofile2poly.cxx | 4 ++--
+ 1 file changed, 2 insertions(+), 2 deletions(-)
+
+diff --git a/hist/hist/test/test_tprofile2poly.cxx b/hist/hist/test/test_tprofile2poly.cxx
+index 40cb3052a2..5150da0bea 100644
+--- a/hist/hist/test/test_tprofile2poly.cxx
++++ b/hist/hist/test/test_tprofile2poly.cxx
+@@ -58,14 +58,14 @@ void binEntriesCompare(TProfile2D* tp2d, TProfile2Poly* tpp) {
+       for(Double_t x=0.5; x<10; x+=2.0) {
+          cont1 = tp2d->GetBinEffectiveEntries(tp2d->FindBin(x,y));
+          cont2 = tpp->GetBinEffectiveEntries(tpp->FindBin(x,y));
+-         ASSERT_NEAR(cont1, cont2, delta);
++         ASSERT_NEAR(cont1, cont2, 2*delta);
+       }
+ 
+    }
+    // test overflow
+    cont1 = tp2d->GetBinEffectiveEntries(tp2d->FindBin(11,11));
+    cont2 = tpp->GetBinEffectiveEntries(tpp->FindBin(11,11));
+-   ASSERT_NEAR(cont1, cont2, delta);
++   ASSERT_NEAR(cont1, cont2, 2*delta);
+ 
+ }
+ 
+-- 
+2.34.1
+
