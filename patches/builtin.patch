diff --git a/var/spack/repos/builtin/packages/numactl/package.py b/var/spack/repos/builtin/packages/numactl/package.py
index f6c82f5522..d0fe04e53e 100644
--- a/var/spack/repos/builtin/packages/numactl/package.py
+++ b/var/spack/repos/builtin/packages/numactl/package.py
@@ -30,6 +30,7 @@ class Numactl(AutotoolsPackage):
 
     def autoreconf(self, spec, prefix):
         bash = which('bash')
+        bash('libtoolize')
         bash('./autogen.sh')
 
     def patch(self):
diff --git a/var/spack/repos/builtin/packages/emacs/glibc-2.34.patch b/var/spack/repos/builtin/packages/emacs/glibc-2.34.patch
new file mode 100644
index 0000000000..793503db5a
--- /dev/null
+++ b/var/spack/repos/builtin/packages/emacs/glibc-2.34.patch
@@ -0,0 +1,20 @@
+Fix compilation with glibc-2.34
+https://bugs.gentoo.org/803644
+
+In glibc-2.34, definition of SIGSTKSZ has changed from a fixed value
+to sysconf(_SC_SIGSTKSZ), which cannot be used in the definition of a
+static array. In 2.33, the default SIGSTKSZ was 8192, but apparently
+some arches (e.g. aarch64 and sparc) used 16384. Hardcode the larger
+of these values.
+
+--- emacs-27.2/src/sysdep.c
++++ emacs-27.2/src/sysdep.c
+@@ -1818,7 +1818,7 @@
+ 
+ /* Alternate stack used by SIGSEGV handler below.  */
+ 
+-static unsigned char sigsegv_stack[SIGSTKSZ];
++static unsigned char sigsegv_stack[16384];
+ 
+ 
+ /* Return true if SIGINFO indicates a stack overflow.  */
diff --git a/var/spack/repos/builtin/packages/emacs/package.py b/var/spack/repos/builtin/packages/emacs/package.py
index a45d726fd0..c9d708e194 100644
--- a/var/spack/repos/builtin/packages/emacs/package.py
+++ b/var/spack/repos/builtin/packages/emacs/package.py
@@ -61,6 +61,8 @@ class Emacs(AutotoolsPackage, GNUMirrorPackage):
     conflicts('@:26.3', when='platform=darwin os=catalina')
     conflicts('+native', when='@:27', msg="native compilation require @master")
 
+    patch('glibc-2.34.patch')
+
     @when('platform=darwin')
     def setup_build_environment(self, env):
         # on macOS, emacs' config does search hard enough for ncurses'
diff --git a/var/spack/repos/builtin/packages/gaudi/package.py b/var/spack/repos/builtin/packages/gaudi/package.py
index a7d37c8651..a4fc872296 100644
--- a/var/spack/repos/builtin/packages/gaudi/package.py
+++ b/var/spack/repos/builtin/packages/gaudi/package.py
@@ -60,6 +60,7 @@ class Gaudi(CMakePackage):
     depends_on('range-v3')
     depends_on('root +python +root7 +ssl +tbb +threads')
     depends_on('zlib')
+    depends_on('py-pytest', when='@36.9:', type=('build', 'run'))
 
     # todo: this should be a test dependency only,
     depends_on('py-nose', when="@35.0", type=('build', 'run'))
diff --git a/var/spack/repos/builtin/packages/libdrm/nouveau-clang.patch b/var/spack/repos/builtin/packages/libdrm/nouveau-clang.patch
new file mode 100644
index 0000000000..6c9c03567d
--- /dev/null
+++ b/var/spack/repos/builtin/packages/libdrm/nouveau-clang.patch
@@ -0,0 +1,14 @@
+diff --git a/nouveau/Makefile.am b/nouveau/Makefile.am
+index 5574fd8..75ab27c 100644
+--- a/nouveau/Makefile.am
++++ b/nouveau/Makefile.am
+@@ -5,8 +5,7 @@ AM_CFLAGS = \
+ 	-fvisibility=hidden \
+ 	-I$(top_srcdir) \
+ 	$(PTHREADSTUBS_CFLAGS) \
+-	-I$(top_srcdir)/include/drm \
+-	-DDEBUG
++	-I$(top_srcdir)/include/drm
+ 
+ libdrm_nouveau_la_LTLIBRARIES = libdrm_nouveau.la
+ libdrm_nouveau_ladir = $(libdir)
diff --git a/var/spack/repos/builtin/packages/libdrm/package.py b/var/spack/repos/builtin/packages/libdrm/package.py
index 2d7a4133fb..c1a2d1c93f 100644
--- a/var/spack/repos/builtin/packages/libdrm/package.py
+++ b/var/spack/repos/builtin/packages/libdrm/package.py
@@ -23,6 +23,11 @@ class Libdrm(AutotoolsPackage):
     depends_on('pkgconfig', type='build')
     depends_on('libpciaccess@0.10:')
     depends_on('libpthread-stubs')
+    depends_on('automake@1.15:1.15.99', type='build',  when='%clang')
+    depends_on('autoconf', type='build',  when='%clang')
+
+    #clang linker has multiple defines
+    patch('nouveau-clang.patch', when='%clang')
 
     def configure_args(self):
         args = []
diff --git a/var/spack/repos/builtin/packages/xgboost/package.py b/var/spack/repos/builtin/packages/xgboost/package.py
index 85e9c26de0..5f0062fe47 100644
--- a/var/spack/repos/builtin/packages/xgboost/package.py
+++ b/var/spack/repos/builtin/packages/xgboost/package.py
@@ -45,8 +45,13 @@ def cmake_args(self):
         args = [
             self.define_from_variant('USE_CUDA', 'cuda'),
             self.define_from_variant('USE_NCCL', 'nccl'),
-            self.define_from_variant('USE_OPENMP', 'openmp'),
         ]
+        # disable openmp when using clang
+        # cmake file does not detect openmp correctly for clang
+        if not self.spec.satisfies('%clang'):
+            args.append(self.define_from_variant('USE_OPENMP', 'openmp'))
+        else:
+            args.append('-DUSE_OPENMP=False')
 
         if '+cuda' in self.spec and 'cuda_arch=none' not in self.spec:
             args.append(self.define(
diff --git a/var/spack/repos/builtin/packages/libzmq/package.py b/var/spack/repos/builtin/packages/libzmq/package.py
index e65cefbe28..3fd53ce1ab 100644
--- a/var/spack/repos/builtin/packages/libzmq/package.py
+++ b/var/spack/repos/builtin/packages/libzmq/package.py
@@ -57,6 +57,8 @@ class Libzmq(AutotoolsPackage):
 
     # Fix aggressive compiler warning false positive
     patch('https://github.com/zeromq/libzmq/commit/92b2c38a2c51a1942a380c7ee08147f7b1ca6845.patch?full_index=1', sha256='310b8aa57a8ea77b7ac74debb3bf928cbafdef5e7ca35beaac5d9c61c7edd239', when='@4.2.3:4.3.4 %gcc@11:')
+    # Gcc12 patch fix
+    patch('https://github.com/zeromq/libzmq/commit/a01d259db372bff5e049aa966da4efce7259af67.patch?full_index=1', sha256='edca864cba914481a5c97d2e975ba64ca1d2fbfc0044e9a78c48f1f7b2bedb6f', when='@:4.3.4 %gcc@12:')
 
     def url_for_version(self, version):
         if version <= Version('4.1.4'):
diff --git a/var/spack/repos/builtin/packages/gdb/package.py b/var/spack/repos/builtin/packages/gdb/package.py
index b003baa255..fe80a25f5b 100644
--- a/var/spack/repos/builtin/packages/gdb/package.py
+++ b/var/spack/repos/builtin/packages/gdb/package.py
@@ -19,6 +19,7 @@ class Gdb(AutotoolsPackage, GNUMirrorPackage):
 
     maintainers = ['robertu94']
 
+    version('11.2',   sha256='b558b66084835e43b6361f60d60d314c487447419cdf53adf83a87020c367290')
     version('11.1',   sha256='cc2903474e965a43d09c3b263952d48ced39dd22ce2d01968f3aa181335fcb9c')
     version('10.2',   sha256='b33ad58d687487a821ec8d878daab0f716be60d0936f2e3ac5cf08419ce70350')
     version('10.1',   sha256='f12f388b99e1408c01308c3f753313fafa45517740c81ab7ed0d511b13e2cf55')
diff --git a/var/spack/repos/builtin/packages/davix/package.py b/var/spack/repos/builtin/packages/davix/package.py
index e6750919f2..0a470904e5 100644
--- a/var/spack/repos/builtin/packages/davix/package.py
+++ b/var/spack/repos/builtin/packages/davix/package.py
@@ -10,8 +10,10 @@ class Davix(CMakePackage):
     """High-performance file management over WebDAV/HTTP."""
 
     homepage = "https://davix.web.cern.ch/davix/docs/devel/index.html"
-    url      = "https://github.com/cern-fts/davix/releases/download/R_0_7_6/davix-0.7.6.tar.gz"
+    url      = "https://github.com/cern-fts/davix/releases/download/R_0_8_1/davix-0.8.1.tar.gz"
 
+    version('0.8.1', sha256='3f42f4eadaf560ab80984535ffa096d3e88287d631960b2193e84cf29a5fe3a6')
+    version('0.8.0', sha256='2f108da0408a83fb5b9f0c68150d360ba733e4b3a0fe298d45b0d32d28ab7124')
     version('0.7.6', sha256='a2e7fdff29f7ba247a3bcdb08ab1db6d6ed745de2d3971b46526986caf360673')
     version('0.7.5', sha256='d920ca976846875d83af4dc50c99280bb3741fcf8351d5733453e70fa5fe6fc8')
     version('0.7.3', sha256='cd46276e72c6a0da1e2ad30eb66ec509a4c023687767c62a66713fa8c23d328a')
