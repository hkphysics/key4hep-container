diff --git a/var/spack/repos/builtin/packages/numactl/package.py b/var/spack/repos/builtin/packages/numactl/package.py
index f6c82f5522..d0fe04e53e 100644
--- a/var/spack/repos/builtin/packages/numactl/package.py
+++ b/var/spack/repos/builtin/packages/numactl/package.py
@@ -30,6 +30,7 @@ class Numactl(AutotoolsPackage):
 
     def autoreconf(self, spec, prefix):
         bash = which('bash')
+        bash('libtoolize')
         bash('./autogen.sh')
 
     def patch(self):
diff --git a/var/spack/repos/builtin/packages/emacs/glibc-2.34.patch b/var/spack/repos/builtin/packages/emacs/glibc-2.34.patch
new file mode 100644
index 0000000000..793503db5a
--- /dev/null
+++ b/var/spack/repos/builtin/packages/emacs/glibc-2.34.patch
@@ -0,0 +1,20 @@
+Fix compilation with glibc-2.34
+https://bugs.gentoo.org/803644
+
+In glibc-2.34, definition of SIGSTKSZ has changed from a fixed value
+to sysconf(_SC_SIGSTKSZ), which cannot be used in the definition of a
+static array. In 2.33, the default SIGSTKSZ was 8192, but apparently
+some arches (e.g. aarch64 and sparc) used 16384. Hardcode the larger
+of these values.
+
+--- emacs-27.2/src/sysdep.c
++++ emacs-27.2/src/sysdep.c
+@@ -1818,7 +1818,7 @@
+ 
+ /* Alternate stack used by SIGSEGV handler below.  */
+ 
+-static unsigned char sigsegv_stack[SIGSTKSZ];
++static unsigned char sigsegv_stack[16384];
+ 
+ 
+ /* Return true if SIGINFO indicates a stack overflow.  */
diff --git a/var/spack/repos/builtin/packages/emacs/package.py b/var/spack/repos/builtin/packages/emacs/package.py
index a45d726fd0..c9d708e194 100644
--- a/var/spack/repos/builtin/packages/emacs/package.py
+++ b/var/spack/repos/builtin/packages/emacs/package.py
@@ -61,6 +61,8 @@ class Emacs(AutotoolsPackage, GNUMirrorPackage):
     conflicts('@:26.3', when='platform=darwin os=catalina')
     conflicts('+native', when='@:27', msg="native compilation require @master")
 
+    patch('glibc-2.34.patch')
+
     @when('platform=darwin')
     def setup_build_environment(self, env):
         # on macOS, emacs' config does search hard enough for ncurses'
diff --git a/var/spack/repos/builtin/packages/gaudi/package.py b/var/spack/repos/builtin/packages/gaudi/package.py
index a7d37c8651..a4fc872296 100644
--- a/var/spack/repos/builtin/packages/gaudi/package.py
+++ b/var/spack/repos/builtin/packages/gaudi/package.py
@@ -60,6 +60,7 @@ class Gaudi(CMakePackage):
     depends_on('range-v3')
     depends_on('root +python +root7 +ssl +tbb +threads')
     depends_on('zlib')
+    depends_on('py-pytest', when='@36.9:', type=('build', 'run'))
 
     # todo: this should be a test dependency only,
     depends_on('py-nose', when="@35.0", type=('build', 'run'))
diff --git a/var/spack/repos/builtin/packages/libdrm/nouveau-clang.patch b/var/spack/repos/builtin/packages/libdrm/nouveau-clang.patch
new file mode 100644
index 0000000000..6c9c03567d
--- /dev/null
+++ b/var/spack/repos/builtin/packages/libdrm/nouveau-clang.patch
@@ -0,0 +1,14 @@
+diff --git a/nouveau/Makefile.am b/nouveau/Makefile.am
+index 5574fd8..75ab27c 100644
+--- a/nouveau/Makefile.am
++++ b/nouveau/Makefile.am
+@@ -5,8 +5,7 @@ AM_CFLAGS = \
+ 	-fvisibility=hidden \
+ 	-I$(top_srcdir) \
+ 	$(PTHREADSTUBS_CFLAGS) \
+-	-I$(top_srcdir)/include/drm \
+-	-DDEBUG
++	-I$(top_srcdir)/include/drm
+ 
+ libdrm_nouveau_la_LTLIBRARIES = libdrm_nouveau.la
+ libdrm_nouveau_ladir = $(libdir)
diff --git a/var/spack/repos/builtin/packages/libdrm/package.py b/var/spack/repos/builtin/packages/libdrm/package.py
index 2d7a4133fb..c1a2d1c93f 100644
--- a/var/spack/repos/builtin/packages/libdrm/package.py
+++ b/var/spack/repos/builtin/packages/libdrm/package.py
@@ -23,6 +23,11 @@ class Libdrm(AutotoolsPackage):
     depends_on('pkgconfig', type='build')
     depends_on('libpciaccess@0.10:')
     depends_on('libpthread-stubs')
+    depends_on('automake@1.15:1.15.99', type='build',  when='%clang')
+    depends_on('autoconf', type='build',  when='%clang')
+
+    #clang linker has multiple defines
+    patch('nouveau-clang.patch', when='%clang')
 
     def configure_args(self):
         args = []
diff --git a/var/spack/repos/builtin/packages/xgboost/package.py b/var/spack/repos/builtin/packages/xgboost/package.py
index 85e9c26de0..5f0062fe47 100644
--- a/var/spack/repos/builtin/packages/xgboost/package.py
+++ b/var/spack/repos/builtin/packages/xgboost/package.py
@@ -45,8 +45,13 @@ def cmake_args(self):
         args = [
             self.define_from_variant('USE_CUDA', 'cuda'),
             self.define_from_variant('USE_NCCL', 'nccl'),
-            self.define_from_variant('USE_OPENMP', 'openmp'),
         ]
+        # disable openmp when using clang
+        # cmake file does not detect openmp correctly for clang
+        if not self.spec.satisfies('%clang'):
+            args.append(self.define_from_variant('USE_OPENMP', 'openmp'))
+        else:
+            args.append('-DUSE_OPENMP=False')
 
         if '+cuda' in self.spec and 'cuda_arch=none' not in self.spec:
             args.append(self.define(
diff --git a/var/spack/repos/builtin/packages/rivet/package.py b/var/spack/repos/builtin/packages/rivet/package.py
index 2ca4014449..0f01914b4f 100644
--- a/var/spack/repos/builtin/packages/rivet/package.py
+++ b/var/spack/repos/builtin/packages/rivet/package.py
@@ -155,7 +155,9 @@ def setup_build_environment(self, env):
         # this avoids an "import site" error in the build
         env.unset('PYTHONHOME')
         fjcontrib_home = self.spec['fjcontrib'].prefix
+        fastjet_home = self.spec['fastjet'].prefix
         env.prepend_path('LD_LIBRARY_PATH', fjcontrib_home.lib)
+        env.prepend_path('LD_LIBRARY_PATH', fastjet_home.lib)
 
     def flag_handler(self, name, flags):
         if self.spec.satisfies('@3.1.2:') and name == 'cxxflags':
