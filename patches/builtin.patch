diff --git a/var/spack/repos/builtin/packages/numactl/package.py b/var/spack/repos/builtin/packages/numactl/package.py
index f6c82f5522..d0fe04e53e 100644
--- a/var/spack/repos/builtin/packages/numactl/package.py
+++ b/var/spack/repos/builtin/packages/numactl/package.py
@@ -30,6 +30,7 @@ class Numactl(AutotoolsPackage):
 
     def autoreconf(self, spec, prefix):
         bash = which('bash')
+        bash('libtoolize')
         bash('./autogen.sh')
 
     def patch(self):
diff --git a/var/spack/repos/builtin/packages/emacs/glibc-2.34.patch b/var/spack/repos/builtin/packages/emacs/glibc-2.34.patch
new file mode 100644
index 0000000000..793503db5a
--- /dev/null
+++ b/var/spack/repos/builtin/packages/emacs/glibc-2.34.patch
@@ -0,0 +1,20 @@
+Fix compilation with glibc-2.34
+https://bugs.gentoo.org/803644
+
+In glibc-2.34, definition of SIGSTKSZ has changed from a fixed value
+to sysconf(_SC_SIGSTKSZ), which cannot be used in the definition of a
+static array. In 2.33, the default SIGSTKSZ was 8192, but apparently
+some arches (e.g. aarch64 and sparc) used 16384. Hardcode the larger
+of these values.
+
+--- emacs-27.2/src/sysdep.c
++++ emacs-27.2/src/sysdep.c
+@@ -1818,7 +1818,7 @@
+ 
+ /* Alternate stack used by SIGSEGV handler below.  */
+ 
+-static unsigned char sigsegv_stack[SIGSTKSZ];
++static unsigned char sigsegv_stack[16384];
+ 
+ 
+ /* Return true if SIGINFO indicates a stack overflow.  */
diff --git a/var/spack/repos/builtin/packages/emacs/package.py b/var/spack/repos/builtin/packages/emacs/package.py
index a45d726fd0..c9d708e194 100644
--- a/var/spack/repos/builtin/packages/emacs/package.py
+++ b/var/spack/repos/builtin/packages/emacs/package.py
@@ -61,6 +61,8 @@ class Emacs(AutotoolsPackage, GNUMirrorPackage):
     conflicts('@:26.3', when='platform=darwin os=catalina')
     conflicts('+native', when='@:27', msg="native compilation require @master")
 
+    patch('glibc-2.34.patch')
+
     @when('platform=darwin')
     def setup_build_environment(self, env):
         # on macOS, emacs' config does search hard enough for ncurses'
diff --git a/var/spack/repos/builtin/packages/gaudi/package.py b/var/spack/repos/builtin/packages/gaudi/package.py
index a7d37c8651..a4fc872296 100644
--- a/var/spack/repos/builtin/packages/gaudi/package.py
+++ b/var/spack/repos/builtin/packages/gaudi/package.py
@@ -60,6 +60,7 @@ class Gaudi(CMakePackage):
     depends_on('range-v3')
     depends_on('root +python +root7 +ssl +tbb +threads')
     depends_on('zlib')
+    depends_on('py-pytest', when='@36.9:', type=('build', 'run'))
 
     # todo: this should be a test dependency only,
     depends_on('py-nose', when="@35.0", type=('build', 'run'))
diff --git a/var/spack/repos/builtin/packages/xgboost/package.py b/var/spack/repos/builtin/packages/xgboost/package.py
index 85e9c26de0..5f0062fe47 100644
--- a/var/spack/repos/builtin/packages/xgboost/package.py
+++ b/var/spack/repos/builtin/packages/xgboost/package.py
@@ -45,8 +45,13 @@ def cmake_args(self):
         args = [
             self.define_from_variant('USE_CUDA', 'cuda'),
             self.define_from_variant('USE_NCCL', 'nccl'),
-            self.define_from_variant('USE_OPENMP', 'openmp'),
         ]
+        # disable openmp when using clang
+        # cmake file does not detect openmp correctly for clang
+        if not self.spec.satisfies('%clang'):
+            args.append(self.define_from_variant('USE_OPENMP', 'openmp'))
+        else:
+            args.append('-DUSE_OPENMP=False')
 
         if '+cuda' in self.spec and 'cuda_arch=none' not in self.spec:
             args.append(self.define(
diff --git a/var/spack/repos/builtin/packages/libzmq/package.py b/var/spack/repos/builtin/packages/libzmq/package.py
index e65cefbe28..3fd53ce1ab 100644
--- a/var/spack/repos/builtin/packages/libzmq/package.py
+++ b/var/spack/repos/builtin/packages/libzmq/package.py
@@ -57,6 +57,8 @@ class Libzmq(AutotoolsPackage):
 
     # Fix aggressive compiler warning false positive
     patch('https://github.com/zeromq/libzmq/commit/92b2c38a2c51a1942a380c7ee08147f7b1ca6845.patch?full_index=1', sha256='310b8aa57a8ea77b7ac74debb3bf928cbafdef5e7ca35beaac5d9c61c7edd239', when='@4.2.3:4.3.4 %gcc@11:')
+    # Gcc12 patch fix
+    patch('https://github.com/zeromq/libzmq/commit/a01d259db372bff5e049aa966da4efce7259af67.patch?full_index=1', sha256='edca864cba914481a5c97d2e975ba64ca1d2fbfc0044e9a78c48f1f7b2bedb6f', when='@:4.3.4 %gcc@12:')
 
     def url_for_version(self, version):
         if version <= Version('4.1.4'):
diff --git a/var/spack/repos/builtin/packages/root/package.py b/var/spack/repos/builtin/packages/root/package.py
index 324fc979b3..e55aac1349 100644
--- a/var/spack/repos/builtin/packages/root/package.py
+++ b/var/spack/repos/builtin/packages/root/package.py
@@ -80,6 +80,11 @@ class Root(CMakePackage):
     # https://github.com/root-project/ROOT/commit/e0ae0483985d90a71a6cabd10d3622dfd1c15611.
     patch('root7-webgui.patch', level=1, when='@6.16.00')
 
+    # gcc12
+    patch('root-fix-compilation-with-gcc-12.patch', when='@6.26.00:%gcc@12')
+    patch('root-fix-test-failure-on-ppc64le-and-aarch64-with-gcc-12.patch', when='@6.26.00:%gcc@12')
+    patch('root-missing-include.patch', when='@6.26.00:')
+
     if sys.platform == 'darwin':
         # Resolve non-standard use of uint, _cf_
         # https://sft.its.cern.ch/jira/browse/ROOT-7886.
diff --git a/var/spack/repos/builtin/packages/root/root-fix-compilation-with-gcc-12.patch b/var/spack/repos/builtin/packages/root/root-fix-compilation-with-gcc-12.patch
new file mode 100644
index 0000000000..2c34516719
--- /dev/null
+++ b/var/spack/repos/builtin/packages/root/root-fix-compilation-with-gcc-12.patch
@@ -0,0 +1,63 @@
+From 3bc55ece1db8b32c5e86fd6b85856addd67265fb Mon Sep 17 00:00:00 2001
+From: Mattias Ellert <mattias.ellert@physics.uu.se>
+Date: Sat, 15 Jan 2022 06:35:58 +0100
+Subject: [PATCH] Fix compilation with gcc 12
+
+Fixes error: use of deleted function
+
+/builddir/build/BUILD/root-6.24.06/interpreter/llvm/src/lib/Target/NVPTX/NVPTXAsmPrinter.cpp: In member function 'std::string llvm::NVPTXAsmPrinter::getPTXFundamentalTypeStr(llvm::Type*, bool) const':
+/builddir/build/BUILD/root-6.24.06/interpreter/llvm/src/lib/Target/NVPTX/NVPTXAsmPrinter.cpp:1319:10: error: use of deleted function 'std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::basic_string(std::nullptr_t) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::nullptr_t = std::nullptr_t]'
+ 1319 |   return nullptr;
+      |          ^~~~~~~
+In file included from /usr/include/c++/12/string:53,
+                 from /usr/include/c++/12/bits/locale_classes.h:40,
+                 from /usr/include/c++/12/bits/ios_base.h:41,
+                 from /usr/include/c++/12/streambuf:41,
+                 from /usr/include/c++/12/bits/streambuf_iterator.h:35,
+                 from /usr/include/c++/12/iterator:66,
+                 from /builddir/build/BUILD/root-6.24.06/interpreter/llvm/src/include/llvm/ADT/iterator_range.h:21,
+                 from /builddir/build/BUILD/root-6.24.06/interpreter/llvm/src/include/llvm/ADT/SmallVector.h:16,
+                 from /builddir/build/BUILD/root-6.24.06/interpreter/llvm/src/include/llvm/ADT/STLExtras.h:20,
+                 from /builddir/build/BUILD/root-6.24.06/interpreter/llvm/src/include/llvm/ADT/StringRef.h:12,
+                 from /builddir/build/BUILD/root-6.24.06/interpreter/llvm/src/include/llvm/Pass.h:31,
+                 from /builddir/build/BUILD/root-6.24.06/interpreter/llvm/src/lib/Target/NVPTX/NVPTX.h:17,
+                 from /builddir/build/BUILD/root-6.24.06/interpreter/llvm/src/lib/Target/NVPTX/NVPTXAsmPrinter.h:17,
+                 from /builddir/build/BUILD/root-6.24.06/interpreter/llvm/src/lib/Target/NVPTX/NVPTXAsmPrinter.cpp:14:
+/usr/include/c++/12/bits/basic_string.h:732:7: note: declared here
+  732 |       basic_string(nullptr_t) = delete;
+      |       ^~~~~~~~~~~~
+
+Fix backported from LLVM upstrea https://reviews.llvm.org/D87697
+---
+ interpreter/llvm/src/lib/Target/NVPTX/NVPTXAsmPrinter.cpp | 6 ++----
+ 1 file changed, 2 insertions(+), 4 deletions(-)
+
+diff --git a/interpreter/llvm/src/lib/Target/NVPTX/NVPTXAsmPrinter.cpp b/interpreter/llvm/src/lib/Target/NVPTX/NVPTXAsmPrinter.cpp
+index 5f38b4a3c4..bfa74bd98f 100644
+--- a/interpreter/llvm/src/lib/Target/NVPTX/NVPTXAsmPrinter.cpp
++++ b/interpreter/llvm/src/lib/Target/NVPTX/NVPTXAsmPrinter.cpp
+@@ -1281,9 +1281,6 @@ void NVPTXAsmPrinter::emitPTXAddressSpace(unsigned int AddressSpace,
+ std::string
+ NVPTXAsmPrinter::getPTXFundamentalTypeStr(Type *Ty, bool useB4PTR) const {
+   switch (Ty->getTypeID()) {
+-  default:
+-    llvm_unreachable("unexpected type");
+-    break;
+   case Type::IntegerTyID: {
+     unsigned NumBits = cast<IntegerType>(Ty)->getBitWidth();
+     if (NumBits == 1)
+@@ -1314,9 +1311,10 @@ NVPTXAsmPrinter::getPTXFundamentalTypeStr(Type *Ty, bool useB4PTR) const {
+       return "b32";
+     else
+       return "u32";
++  default:
++    break;
+   }
+   llvm_unreachable("unexpected type");
+-  return nullptr;
+ }
+ 
+ void NVPTXAsmPrinter::emitPTXGlobalVariable(const GlobalVariable *GVar,
+-- 
+2.34.1
+
diff --git a/var/spack/repos/builtin/packages/root/root-fix-test-failure-on-ppc64le-and-aarch64-with-gcc-12.patch b/var/spack/repos/builtin/packages/root/root-fix-test-failure-on-ppc64le-and-aarch64-with-gcc-12.patch
new file mode 100644
index 0000000000..007c3cd8a5
--- /dev/null
+++ b/var/spack/repos/builtin/packages/root/root-fix-test-failure-on-ppc64le-and-aarch64-with-gcc-12.patch
@@ -0,0 +1,43 @@
+From ddc155795baa9d4690717c204e54a7fd4600c688 Mon Sep 17 00:00:00 2001
+From: Mattias Ellert <mattias.ellert@physics.uu.se>
+Date: Mon, 17 Jan 2022 18:49:30 +0100
+Subject: [PATCH] Fix test failure on ppc64le and aarch64 with gcc 12
+
+.../hist/hist/test/test_tprofile2poly.cxx:61: Failure
+The difference between cont1 and cont2 is 1.4551915228366852e-11, which exceeds delta, where
+cont1 evaluates to 54886.064319363642,
+cont2 evaluates to 54886.064319363628, and
+delta evaluates to 9.999999960041972e-12.
+.../hist/hist/test/test_tprofile2poly.cxx:61: Failure
+The difference between cont1 and cont2 is 1.4551915228366852e-11, where
+cont1 evaluates to 109868.61342004745,
+cont2 evaluates to 109868.61342004743.
+The abs_error parameter delta evaluates to 9.999999960041972e-12 which is smaller than the minimum distance between doubles for numbers of this magnitude which is 1.4551915228366852e-11, thus making this EXPECT_NEAR check equivalent to EXPECT_EQUAL. Consider using EXPECT_DOUBLE_EQ instead.
+---
+ hist/hist/test/test_tprofile2poly.cxx | 4 ++--
+ 1 file changed, 2 insertions(+), 2 deletions(-)
+
+diff --git a/hist/hist/test/test_tprofile2poly.cxx b/hist/hist/test/test_tprofile2poly.cxx
+index 40cb3052a2..5150da0bea 100644
+--- a/hist/hist/test/test_tprofile2poly.cxx
++++ b/hist/hist/test/test_tprofile2poly.cxx
+@@ -58,14 +58,14 @@ void binEntriesCompare(TProfile2D* tp2d, TProfile2Poly* tpp) {
+       for(Double_t x=0.5; x<10; x+=2.0) {
+          cont1 = tp2d->GetBinEffectiveEntries(tp2d->FindBin(x,y));
+          cont2 = tpp->GetBinEffectiveEntries(tpp->FindBin(x,y));
+-         ASSERT_NEAR(cont1, cont2, delta);
++         ASSERT_NEAR(cont1, cont2, 2*delta);
+       }
+ 
+    }
+    // test overflow
+    cont1 = tp2d->GetBinEffectiveEntries(tp2d->FindBin(11,11));
+    cont2 = tpp->GetBinEffectiveEntries(tpp->FindBin(11,11));
+-   ASSERT_NEAR(cont1, cont2, delta);
++   ASSERT_NEAR(cont1, cont2, 2*delta);
+ 
+ }
+ 
+-- 
+2.34.1
+
diff --git a/var/spack/repos/builtin/packages/root/root-missing-include.patch b/var/spack/repos/builtin/packages/root/root-missing-include.patch
new file mode 100644
index 0000000000..8c6bc176f8
--- /dev/null
+++ b/var/spack/repos/builtin/packages/root/root-missing-include.patch
@@ -0,0 +1,32 @@
+From 235e446b0ac14170e49c15d5725fbe6dd315351f Mon Sep 17 00:00:00 2001
+From: Mattias Ellert <mattias.ellert@physics.uu.se>
+Date: Tue, 15 Mar 2022 09:08:39 +0100
+Subject: [PATCH] Add #include <cstring> for std::memcpy
+
+In file included from /builddir/build/BUILD/root-6.26.00/tmva/sofie/inc/TMVA/RModel.hxx:14,
+                 from /builddir/build/BUILD/root-6.26.00/tmva/sofie/src/RModel.cxx:3:
+/builddir/build/BUILD/root-6.26.00/tmva/sofie/inc/TMVA/SOFIE_common.hxx: In member function 'void TMVA::Experimental::SOFIE::InitializedTensor::CastPersistentToShared()':
+/builddir/build/BUILD/root-6.26.00/tmva/sofie/inc/TMVA/SOFIE_common.hxx:75:12: error: 'memcpy' is not a member of 'std'; did you mean 'wmemcpy'?
+   75 |       std::memcpy(tData.get(), fPersistentData,fSize * sizeof(float));
+      |            ^~~~~~
+      |            wmemcpy
+gmake[2]: *** [tmva/sofie/CMakeFiles/ROOTTMVASofie.dir/build.make:79: tmva/sofie/CMakeFiles/ROOTTMVASofie.dir/src/RModel.cxx.o] Error 1
+---
+ tmva/sofie/inc/TMVA/SOFIE_common.hxx | 1 +
+ 1 file changed, 1 insertion(+)
+
+diff --git a/tmva/sofie/inc/TMVA/SOFIE_common.hxx b/tmva/sofie/inc/TMVA/SOFIE_common.hxx
+index a663855004..7876727eef 100644
+--- a/tmva/sofie/inc/TMVA/SOFIE_common.hxx
++++ b/tmva/sofie/inc/TMVA/SOFIE_common.hxx
+@@ -6,6 +6,7 @@
+ 
+ #include <type_traits>
+ #include <cstdint>
++#include <cstring>
+ #include <string>
+ #include <vector>
+ #include <memory>
+-- 
+2.35.1
+
diff --git a/var/spack/repos/builtin/packages/prmon/package.py b/var/spack/repos/builtin/packages/prmon/package.py
index 52cc3f3c05..2f5de10f82 100644
--- a/var/spack/repos/builtin/packages/prmon/package.py
+++ b/var/spack/repos/builtin/packages/prmon/package.py
@@ -32,6 +32,8 @@ class Prmon(CMakePackage):
     depends_on('py-matplotlib', type="run", when="+plot")
     depends_on('spdlog', when='@3.0.0:')
 
+    patch('cmake.patch')
+
     def cmake_args(self):
         args = [
             # googletest is fetched and built on the fly
diff --git a/var/spack/repos/builtin/packages/prmon/cmake.patch b/var/spack/repos/builtin/packages/prmon/cmake.patch
new file mode 100644
index 0000000000..ceadc9be57
--- /dev/null
+++ b/var/spack/repos/builtin/packages/prmon/cmake.patch
@@ -0,0 +1,9 @@
+diff --git a/CMakeLists.txt b/CMakeLists.txt
+index b67b75e..08a0c29 100644
+--- a/CMakeLists.txt
++++ b/CMakeLists.txt
+@@ -114,3 +114,4 @@ include(cmake/prmonUninstall.cmake)
+ #--- code format targets -------------------------------------------------------
+ include(cmake/clang-format.cmake)
+ include(cmake/python-format.cmake)
++include(cmake/spdlog/spdlogConfig.cmake)
diff --git a/var/spack/repos/builtin/packages/spdlog/package.py b/var/spack/repos/builtin/packages/spdlog/package.py
index bce3c766a4..24e3fafd2e 100644
--- a/var/spack/repos/builtin/packages/spdlog/package.py
+++ b/var/spack/repos/builtin/packages/spdlog/package.py
@@ -60,6 +60,8 @@ def cmake_args(self):
             args.extend([
                 self.define_from_variant('SPDLOG_BUILD_SHARED', 'shared'),
                 self.define('SPDLOG_FMT_EXTERNAL', 'ON'),
+                self.define('SPDLOG_MASTER_PROJECT', 'ON'),
+                self.define('SPDLOG_INSTALL', 'ON'),
                 # tests and examples
                 self.define('SPDLOG_BUILD_TESTS', self.run_tests),
                 self.define('SPDLOG_BUILD_EXAMPLE', self.run_tests),
commit 330d70093a38af42a6dde9b5464c5feaf2af4882
Author: Joseph C Wang <joequant@gmail.com>
Date:   Tue Apr 26 00:09:02 2022 +0800

    change ofstream to fix deprecated boost::filesystem

diff --git a/var/spack/repos/builtin/packages/gaudi/package.py b/var/spack/repos/builtin/packages/gaudi/package.py
index 43716f4a03..b64597c98c 100644
--- a/var/spack/repos/builtin/packages/gaudi/package.py
+++ b/var/spack/repos/builtin/packages/gaudi/package.py
@@ -45,6 +45,8 @@ class Gaudi(CMakePackage):
     # fixes for the cmake config which could not find newer boost versions
     patch("link_target_fixes.patch", when="@33.0:34")
     patch("link_target_fixes32.patch", when="@:32.2")
+    # remove use std::ofstream instead of deprecated boost::filesystem
+    patch("rm-boost-ofstream.patch", when="@34:")
 
     # These dependencies are needed for a minimal Gaudi build
     depends_on('aida')
diff --git a/var/spack/repos/builtin/packages/gaudi/rm-boost-ofstream.patch b/var/spack/repos/builtin/packages/gaudi/rm-boost-ofstream.patch
new file mode 100644
index 0000000000..35b63ee9b6
--- /dev/null
+++ b/var/spack/repos/builtin/packages/gaudi/rm-boost-ofstream.patch
@@ -0,0 +1,22 @@
+diff --git a/GaudiHive/src/PRGraph/PrecedenceRulesGraph.cpp b/GaudiHive/src/PRGraph/PrecedenceRulesGraph.cpp
+index 0f013d0b6..97d5e135c 100644
+--- a/GaudiHive/src/PRGraph/PrecedenceRulesGraph.cpp
++++ b/GaudiHive/src/PRGraph/PrecedenceRulesGraph.cpp
+@@ -629,7 +629,7 @@ namespace concurrency {
+   //---------------------------------------------------------------------------
+ 
+   void PrecedenceRulesGraph::dumpPrecRules( const boost::filesystem::path& fileName, const EventSlot& slot ) {
+-    boost::filesystem::ofstream myfile;
++    std::ofstream myfile;
+     myfile.open( fileName, std::ios::app );
+ 
+     // Declare properties to dump
+@@ -670,7 +670,7 @@ namespace concurrency {
+ 
+   //---------------------------------------------------------------------------
+   void PrecedenceRulesGraph::dumpPrecTrace( const boost::filesystem::path& fileName, const EventSlot& slot ) {
+-    boost::filesystem::ofstream myfile;
++    std::ofstream myfile;
+     myfile.open( fileName, std::ios::app );
+ 
+     // Fill runtimes (as this could not be done on the fly during trace assembling)
diff --git a/var/spack/repos/builtin/packages/pigz/package.py b/var/spack/repos/builtin/packages/pigz/package.py
index 36d10b1fe3..6d10d5b01f 100644
--- a/var/spack/repos/builtin/packages/pigz/package.py
+++ b/var/spack/repos/builtin/packages/pigz/package.py
@@ -20,7 +20,7 @@ class Pigz(MakefilePackage):
     depends_on('zlib')
 
     def build(self, spec, prefix):
-        make()
+        make('CC=%s' % os.environ['CC'])
 
     def install(self, spec, prefix):
         mkdirp(prefix.bin)
diff --git a/var/spack/repos/builtin/packages/gdb/package.py b/var/spack/repos/builtin/packages/gdb/package.py
index 91a6f6ff08..beaca8066c 100644
--- a/var/spack/repos/builtin/packages/gdb/package.py
+++ b/var/spack/repos/builtin/packages/gdb/package.py
@@ -63,6 +63,11 @@ class Gdb(AutotoolsPackage, GNUMirrorPackage):
     # https://sourceware.org/pipermail/gdb-patches/2021-February/176622.html
     patch('importlib.patch', when="@8.3.1:10.2 ^python@3.4:")
 
+    # patch to use decltype instead of typeof
+    patch('https://sourceware.org/git/?p=binutils-gdb.git;a=patch;h=56d9e3c5623d9ebaffb4532a503e67203e4d5488',
+          sha256='254898585e580184b129788cb48175509dd864ca96f039d2eca9bbff01211e82',
+          when='@11.1:11.2')
+
     # Required dependency
     depends_on('texinfo', type='build')
 
diff --git a/lib/spack/env/cc b/lib/spack/env/cc
index 6ce60a87305d..be01c99245b7 100755
--- a/lib/spack/env/cc
+++ b/lib/spack/env/cc
@@ -453,15 +453,33 @@ while [ $# -ne 0 ]; do
         esac
         "
     fi
-    if [ -n "${SPACK_COMPILER_FLAGS_REMOVE}" ] ; then
-        eval "\
-        case '$1' in
-            $SPACK_COMPILER_FLAGS_REMOVE)
-                shift
+    # the replace list is a space-separated list of pipe-separated pairs,
+    # the first in each pair is the original prefix to be matched, the
+    # second is the replacement prefix
+    if [ -n "${SPACK_COMPILER_FLAGS_REPLACE}" ] ; then
+        for rep in ${SPACK_COMPILER_FLAGS_REPLACE} ; do
+            before=${rep%|*}
+            after=${rep#*|}
+            eval "\
+            stripped=\${1##$before}
+            "
+            if [ "$stripped" = "$1" ] ; then
                 continue
-                ;;
-        esac
-        "
+            fi
+
+            replaced="$after$stripped" 
+
+            # it matched, remove it
+            shift
+
+            if [ -z "$replaced" ] ; then
+                # completely removed, continue OUTER loop
+                continue 2
+            fi
+
+            # re-build argument list with replacement
+            set -- "$replaced" "$@"
+        done
     fi
 
     case "$1" in
diff --git a/lib/spack/spack/build_environment.py b/lib/spack/spack/build_environment.py
index c21514091d8f..aaf7fda50534 100644
--- a/lib/spack/spack/build_environment.py
+++ b/lib/spack/spack/build_environment.py
@@ -40,6 +40,7 @@
 import sys
 import traceback
 import types
+from typing import Set, Tuple
 
 from six import StringIO
 
@@ -242,16 +243,19 @@ def clean_environment():
         # show useful matches.
         env.set('LC_ALL', build_lang)
 
-    remove_flags = set()
     keep_flags = set()
+    # set of pairs
+    replace_flags = set()  # type: Set[Tuple[str,str]]
     if spack.config.get('config:flags:keep_werror') == 'all':
         keep_flags.add('-Werror*')
     else:
         if spack.config.get('config:flags:keep_werror') == 'specific':
             keep_flags.add('-Werror=*')
-        remove_flags.add('-Werror*')
+        replace_flags.add(('-Werror','-Wno-error'))
     env.set('SPACK_COMPILER_FLAGS_KEEP', '|'.join(keep_flags))
-    env.set('SPACK_COMPILER_FLAGS_REMOVE', '|'.join(remove_flags))
+    env.set('SPACK_COMPILER_FLAGS_REPLACE', ' '.join([
+         '|'.join(item) for item in replace_flags
+    ]))
 
     # Remove any macports installs from the PATH.  The macports ld can
     # cause conflicts with the built-in linker on el capitan.  Solves
diff --git a/lib/spack/spack/build_environment.py b/lib/spack/spack/build_environment.py
index aaf7fda50534..ad2dcdd5d944 100644
--- a/lib/spack/spack/build_environment.py
+++ b/lib/spack/spack/build_environment.py
@@ -251,10 +251,10 @@ def clean_environment():
     else:
         if spack.config.get('config:flags:keep_werror') == 'specific':
             keep_flags.add('-Werror=*')
-        replace_flags.add(('-Werror','-Wno-error'))
+        replace_flags.add(('-Werror', '-Wno-error'))
     env.set('SPACK_COMPILER_FLAGS_KEEP', '|'.join(keep_flags))
     env.set('SPACK_COMPILER_FLAGS_REPLACE', ' '.join([
-         '|'.join(item) for item in replace_flags
+        '|'.join(item) for item in replace_flags
     ]))
 
     # Remove any macports installs from the PATH.  The macports ld can
