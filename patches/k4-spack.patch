diff --git a/packages/cepcsw/fix-not-in-range-template.patch b/packages/cepcsw/fix-not-in-range-template.patch
new file mode 100644
index 0000000..ad175c8
--- /dev/null
+++ b/packages/cepcsw/fix-not-in-range-template.patch
@@ -0,0 +1,18 @@
+diff --git a/Reconstruction/Tracking/src/Clupatra/NNClusterer.h b/Reconstruction/Tracking/src/Clupatra/NNClusterer.h
+index 2055d99..990169c 100644
+--- a/Reconstruction/Tracking/src/Clupatra/NNClusterer.h
++++ b/Reconstruction/Tracking/src/Clupatra/NNClusterer.h
+@@ -15,11 +15,11 @@
+ namespace nnclu {
+ 
+    /** fast check if integer is in a given range [Min,Max] */
+-  template <unsigned Min,unsigned Max >
++  template <int Min, int Max >
+   inline bool inRange( int i){   return ( (unsigned int) ( i - Min )  <= (unsigned int) ( Max - Min ) ); }
+ 
+   /** fast check if integer is not in a given range [Min,Max] */
+-  template <unsigned Min,unsigned Max >
++  template <int Min, int Max >
+   inline bool notInRange( int i){   return ( (unsigned int) ( i - Min )  > (unsigned int) ( Max - Min ) ); }
+ 
+ 
diff --git a/packages/cepcsw/package.py b/packages/cepcsw/package.py
index f096151..4fd61e5 100644
--- a/packages/cepcsw/package.py
+++ b/packages/cepcsw/package.py
@@ -34,6 +34,8 @@ class Cepcsw(CMakePackage):
     depends_on('pandorasdk')
     depends_on('pandorapfa')
     depends_on('root')
+    # pull request cepc/CEPCSW#65
+    patch('fix-not-in-range-template.patch')
 
     def cmake_args(self):
         args = []
diff --git a/packages/lccontent/bool-int.patch b/packages/lccontent/bool-int.patch
new file mode 100644
index 0000000..d7a62d7
--- /dev/null
+++ b/packages/lccontent/bool-int.patch
@@ -0,0 +1,35 @@
+diff --git a/include/LCUtility/KDTreeLinkerAlgoT.h b/include/LCUtility/KDTreeLinkerAlgoT.h
+index 896d946..6e50819 100644
+--- a/include/LCUtility/KDTreeLinkerAlgoT.h
++++ b/include/LCUtility/KDTreeLinkerAlgoT.h
+@@ -272,7 +272,7 @@ inline void KDTreeLinkerAlgo<DATA, DIM>::recSearch(const KDTreeNodeT<DATA, DIM>
+         for (unsigned i = 0; i < DIM; ++i)
+         {
+             const auto thedim = current->info.dims[i];
+-            isInside *= thedim >= trackBox.dimmin[i] && thedim <= trackBox.dimmax[i];
++            isInside = isInside && thedim >= trackBox.dimmin[i] && thedim <= trackBox.dimmax[i];
+         }
+ 
+         if (isInside)
+@@ -289,8 +289,8 @@ inline void KDTreeLinkerAlgo<DATA, DIM>::recSearch(const KDTreeNodeT<DATA, DIM>
+         {
+             const auto regionmin = current->left->region.dimmin[i];
+             const auto regionmax = current->left->region.dimmax[i];
+-            isFullyContained *= (regionmin >= trackBox.dimmin[i] && regionmax <= trackBox.dimmax[i]);
+-            hasIntersection *= (regionmin < trackBox.dimmax[i] && regionmax > trackBox.dimmin[i]);
++            isFullyContained = isFullyContained && (regionmin >= trackBox.dimmin[i] && regionmax <= trackBox.dimmax[i]);
++            hasIntersection = hasIntersection && (regionmin < trackBox.dimmax[i] && regionmax > trackBox.dimmin[i]);
+         }
+ 
+         if (isFullyContained)
+@@ -310,8 +310,8 @@ inline void KDTreeLinkerAlgo<DATA, DIM>::recSearch(const KDTreeNodeT<DATA, DIM>
+         {
+             const auto regionmin = current->right->region.dimmin[i];
+             const auto regionmax = current->right->region.dimmax[i];
+-            isFullyContained *= (regionmin >= trackBox.dimmin[i] && regionmax <= trackBox.dimmax[i]);
+-            hasIntersection *= (regionmin < trackBox.dimmax[i] && regionmax > trackBox.dimmin[i]);
++            isFullyContained = isFullyContained && (regionmin >= trackBox.dimmin[i] && regionmax <= trackBox.dimmax[i]);
++            hasIntersection = hasIntersection && (regionmin < trackBox.dimmax[i] && regionmax > trackBox.dimmin[i]);
+         }
+ 
+         if (isFullyContained)
diff --git a/packages/lccontent/package.py b/packages/lccontent/package.py
index d0296fb..bbc6e69 100644
--- a/packages/lccontent/package.py
+++ b/packages/lccontent/package.py
@@ -25,14 +25,18 @@ class Lccontent(CMakePackage):
     patch("path2.patch")
     patch("path3.patch")
     patch("path4.patch")
+    patch("bool-int.patch")
 
     depends_on("pandorapfa")
     depends_on("pandorasdk")
 
     def cmake_args(self):
         args = [
-                '-DCMAKE_MODULE_PATH=%s' % self.spec["pandorapfa"].prefix.cmakemodules,
-                "-DCMAKE_CXX_FLAGS=-std=c++17"]
+                '-DCMAKE_CXX_STANDARD=17',
+                '-DCMAKE_MODULE_PATH=%s' % self.spec["pandorapfa"].prefix.cmakemodules
+        ]
+        if self.spec.satisfies('%gcc@10:'):
+            args.append('-DCMAKE_CXX_FLAGS=-Wno-int-in-bool-context')
         return args
 
     def url_for_version(self, version):
