diff --git a/packages/fcalclusterer/package.py b/packages/fcalclusterer/package.py
index 0880e66..14ff9b6 100644
--- a/packages/fcalclusterer/package.py
+++ b/packages/fcalclusterer/package.py
@@ -17,6 +17,7 @@ class Fcalclusterer(CMakePackage):
     maintainers = ['vvolkl']
 
     version('master', branch='master')
+    version('1.0.3', sha256='5360ccb85f8742d9f4b84c7a3bb3ed3574b534f1b08240100c5b4e48e8ffa35e')
     version('1.0.2', sha256='6c6898f8641743a7654b1c1e7b3a52643be9d23f8bb3624e415c51549ac64cbe')
     version('1.0.1', sha256='87837d7fd802e46c8530c721035ae75946d699031f093612ec02a7fabe0c6143')
 
diff --git a/packages/key4hep-stack/package.py b/packages/key4hep-stack/package.py
index e28791e..0f63edd 100644
--- a/packages/key4hep-stack/package.py
+++ b/packages/key4hep-stack/package.py
@@ -74,8 +74,11 @@ class Key4hepStack(BundlePackage):
     depends_on("podio@0.12.0", when="@0.1")
 
     # be explicit to avoid concretizer errors
-    depends_on('root cxxstd=17 +root7 +ssl')
+    # lcfiplus requires root variant +tmva, but spec asked for ~tmva
+    depends_on('root@6.22.0: cxxstd=17 +root7 +ssl +tmva +mlp')
     depends_on('boost +python')
+    # gaudi needs 3.7.99
+    depends_on('python@:3.7.99')
 
     conflicts("%gcc@8.3.1",
               msg="There are known issues with compilers from redhat's devtoolsets" \
diff --git a/packages/lccontent/bool-int.patch b/packages/lccontent/bool-int.patch
new file mode 100644
index 0000000..d7a62d7
--- /dev/null
+++ b/packages/lccontent/bool-int.patch
@@ -0,0 +1,35 @@
+diff --git a/include/LCUtility/KDTreeLinkerAlgoT.h b/include/LCUtility/KDTreeLinkerAlgoT.h
+index 896d946..6e50819 100644
+--- a/include/LCUtility/KDTreeLinkerAlgoT.h
++++ b/include/LCUtility/KDTreeLinkerAlgoT.h
+@@ -272,7 +272,7 @@ inline void KDTreeLinkerAlgo<DATA, DIM>::recSearch(const KDTreeNodeT<DATA, DIM>
+         for (unsigned i = 0; i < DIM; ++i)
+         {
+             const auto thedim = current->info.dims[i];
+-            isInside *= thedim >= trackBox.dimmin[i] && thedim <= trackBox.dimmax[i];
++            isInside = isInside && thedim >= trackBox.dimmin[i] && thedim <= trackBox.dimmax[i];
+         }
+ 
+         if (isInside)
+@@ -289,8 +289,8 @@ inline void KDTreeLinkerAlgo<DATA, DIM>::recSearch(const KDTreeNodeT<DATA, DIM>
+         {
+             const auto regionmin = current->left->region.dimmin[i];
+             const auto regionmax = current->left->region.dimmax[i];
+-            isFullyContained *= (regionmin >= trackBox.dimmin[i] && regionmax <= trackBox.dimmax[i]);
+-            hasIntersection *= (regionmin < trackBox.dimmax[i] && regionmax > trackBox.dimmin[i]);
++            isFullyContained = isFullyContained && (regionmin >= trackBox.dimmin[i] && regionmax <= trackBox.dimmax[i]);
++            hasIntersection = hasIntersection && (regionmin < trackBox.dimmax[i] && regionmax > trackBox.dimmin[i]);
+         }
+ 
+         if (isFullyContained)
+@@ -310,8 +310,8 @@ inline void KDTreeLinkerAlgo<DATA, DIM>::recSearch(const KDTreeNodeT<DATA, DIM>
+         {
+             const auto regionmin = current->right->region.dimmin[i];
+             const auto regionmax = current->right->region.dimmax[i];
+-            isFullyContained *= (regionmin >= trackBox.dimmin[i] && regionmax <= trackBox.dimmax[i]);
+-            hasIntersection *= (regionmin < trackBox.dimmax[i] && regionmax > trackBox.dimmin[i]);
++            isFullyContained = isFullyContained && (regionmin >= trackBox.dimmin[i] && regionmax <= trackBox.dimmax[i]);
++            hasIntersection = hasIntersection && (regionmin < trackBox.dimmax[i] && regionmax > trackBox.dimmin[i]);
+         }
+ 
+         if (isFullyContained)
diff --git a/packages/lccontent/package.py b/packages/lccontent/package.py
index 619a2dc..8da70e6 100644
--- a/packages/lccontent/package.py
+++ b/packages/lccontent/package.py
@@ -23,14 +23,18 @@ class Lccontent(CMakePackage):
     patch("path2.patch")
     patch("path3.patch")
     patch("path4.patch")
+    patch("bool-int.patch")
 
     depends_on("pandorapfa")
     depends_on("pandorasdk")
 
     def cmake_args(self):
         args = [
-                '-DCMAKE_MODULE_PATH=%s' % self.spec["pandorapfa"].prefix.cmakemodules,
-                "-DCMAKE_CXX_FLAGS=-std=c++17"]
+                '-DCMAKE_CXX_STANDARD=17',
+                '-DCMAKE_MODULE_PATH=%s' % self.spec["pandorapfa"].prefix.cmakemodules
+        ]
+        if self.spec.satisfies('%gcc@10:'):
+            args.append('-DCMAKE_CXX_FLAGS=-Wno-int-in-bool-context')
         return args
 
     def url_for_version(self, version):
