diff --git a/packages/lccontent/package.py b/packages/lccontent/package.py
index 0161946..f7f47cd 100644
--- a/packages/lccontent/package.py
+++ b/packages/lccontent/package.py
@@ -36,6 +36,8 @@ class Lccontent(CMakePackage):
                 '-DCMAKE_CXX_STANDARD=17',
                 '-DCMAKE_MODULE_PATH=%s' % self.spec["pandorapfa"].prefix.cmakemodules
         ]
+        if self.spec.satisfies('%clang'):
+            args.append('-DCMAKE_CXX_FLAGS=-Wno-error')
         return args
 
     def url_for_version(self, version):
--- a/packages/ilcutil/package.py
+++ b/packages/ilcutil/package.py
@@ -21,6 +21,8 @@ class Ilcutil(CMakePackage, Ilcsoftpackage):
     version('1.6', sha256='09083890721704f39a3e902dc660db5326027cc38446b813233d04ec3233ba2e')
 
     patch("installdoc.patch", when="@:1.6.1")
+    # Remove use_cxx11 patch since this conflicts with cxxstd
+    patch("remove-set-cxx-standard.patch")
 
     variant('cxxstd',
             default='17',
diff --git a/packages/ilcutil/remove-set-cxx-standard.patch b/packages/ilcutil/remove-set-cxx-standard.patch
new file mode 100644
index 0000000..6a1f812
--- /dev/null
+++ b/packages/ilcutil/remove-set-cxx-standard.patch
@@ -0,0 +1,23 @@
+diff --git a/cmakemodules/ilcsoft_default_cxx_flags.cmake b/cmakemodules/ilcsoft_default_cxx_flags.cmake
+index 9660784..4002353 100644
+--- a/cmakemodules/ilcsoft_default_cxx_flags.cmake
++++ b/cmakemodules/ilcsoft_default_cxx_flags.cmake
+@@ -31,18 +31,6 @@ FOREACH( FLAG ${COMPILER_FLAGS} )
+ ENDFOREACH()
+ 
+ OPTION( USE_CXX11 "Use CXX Standard 2011" True )
+-IF( USE_CXX11 )
+-  SET( FLAG "-std=c++11" )
+-  SET( FLAG_WORD "stdCXX11" )
+-  CHECK_CXX_COMPILER_FLAG( ${FLAG} CXX_FLAG_WORKS_${FLAG_WORD} )
+-  IF( ${CXX_FLAG_WORKS_${FLAG_WORD}} )
+-    SET( CMAKE_CXX_FLAGS "${FLAG} ${CMAKE_CXX_FLAGS}")
+-  ELSE()
+-    MESSAGE( FATAL_ERROR "Cannot add ${FLAG} to CMAKE_CXX_FLAGS, but c++11 was requested, check your compiler" )
+-  ENDIF()
+-ELSE()
+-  MESSAGE( STATUS "NOT building with CXX11 standard" )
+-ENDIF()
+ 
+ IF( "${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU" AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 4.9 )
+   SET( CMAKE_CXX_FLAGS "-fdiagnostics-color=auto ${CMAKE_CXX_FLAGS}" )
diff --git a/packages/aidatt/package.py b/packages/aidatt/package.py
index a2ad49a..7c92749 100644
--- a/packages/aidatt/package.py
+++ b/packages/aidatt/package.py
@@ -17,6 +17,8 @@ class Aidatt(CMakePackage, Ilcsoftpackage):
     version('master', branch='master')
     version('0.10',     sha256='5379a369ee29bebeece7e814c0595bac9f08f2737ce03ae529b4b4e84dea1283')
 
+    # this cmake option conflicts with newer cxx compilers
+    patch('remove-usecxx11.patch')
     depends_on('ilcutil')
     depends_on('eigen')
     depends_on('generalbrokenlines')
diff --git a/packages/aidatt/remove-usecxx11.patch b/packages/aidatt/remove-usecxx11.patch
new file mode 100644
index 0000000..0a4a34c
--- /dev/null
+++ b/packages/aidatt/remove-usecxx11.patch
@@ -0,0 +1,20 @@
+diff --git a/cmake/aidaTT_default_cxx_flags.cmake b/cmake/aidaTT_default_cxx_flags.cmake
+index 726f47d..9a0e38e 100644
+--- a/cmake/aidaTT_default_cxx_flags.cmake
++++ b/cmake/aidaTT_default_cxx_flags.cmake
+@@ -23,15 +23,3 @@ FOREACH( FLAG ${COMPILER_FLAGS} )
+   ENDIF()
+ ENDFOREACH()
+ 
+-OPTION( USE_CXX11 "Use CXX Standard 2011" True )
+-IF( USE_CXX11 )
+-  SET( FLAG "-std=c++11" )
+-  CHECK_CXX_COMPILER_FLAG( ${FLAG} CXX_FLAG_WORKS_${FLAG} )
+-  IF( ${CXX_FLAG_WORKS_${FLAG}} )
+-    SET( CMAKE_CXX_FLAGS " ${FLAG} ${CMAKE_CXX_FLAGS}")
+-  ELSE()
+-    MESSAGE( FATAL_ERROR "Cannot add ${FLAG} to CMAKE_CXX_FLAGS, but c++11 was requested, check your compiler" )
+-  ENDIF()
+-ELSE()
+-  MESSAGE( STATUS "NOT building with CXX11 standard" )
+-ENDIF()
diff --git a/packages/k4clue/package.py b/packages/k4clue/package.py
index e78eb08..4d83f97 100644
--- a/packages/k4clue/package.py
+++ b/packages/k4clue/package.py
@@ -38,6 +38,7 @@ class K4clue(CMakePackage, Key4hepPackage):
     depends_on('marlinfastjet')
     depends_on('lcfiplus')
     depends_on('k4marlinwrapper')
+    patch('tbb.patch')
 
     def cmake_args(self):
         args = []
diff --git a/packages/k4clue/tbb.patch b/packages/k4clue/tbb.patch
new file mode 100644
index 0000000..020a108
--- /dev/null
+++ b/packages/k4clue/tbb.patch
@@ -0,0 +1,22 @@
+diff --git a/src/main.cc b/src/main.cc
+index 40fda4e..214091d 100644
+--- a/src/main.cc
++++ b/src/main.cc
+@@ -10,7 +10,7 @@
+ #else
+ #include "CLUEAlgoCupla.h"
+ #ifdef FOR_TBB
+-#include "tbb/task_scheduler_init.h"
++#include "tbb/global_control.h"
+ #endif
+ #endif
+ 
+@@ -166,7 +166,7 @@ int main(int argc, char *argv[]) {
+   if (verbose) {
+     std::cout << "Setting up " << TBBNumberOfThread << " TBB Threads" << std::endl;
+   }
+-  tbb::task_scheduler_init init(TBBNumberOfThread);
++  tbb::global_control(tbb::global_control::max_allowed_parallelism, TBBNumberOfThread);
+ #endif
+ 
+   //////////////////////////////
diff --git a/packages/key4hep-stack/common.py b/packages/key4hep-stack/common.py
index 474944e..7445e55 100644
--- a/packages/key4hep-stack/common.py
+++ b/packages/key4hep-stack/common.py
@@ -25,6 +25,7 @@ try:
 except ImportError:
     from spack.package_base import PackageBase
 
+from shlex import quote as cmd_quote
 
 def k4_setup_env_for_framework_tests(spec, env):
     """Setup for tests that need the run environment.
diff --git a/packages/fccdetectors/package.py b/packages/fccdetectors/package.py
index dd948a6..45a49b8 100644
--- a/packages/fccdetectors/package.py
+++ b/packages/fccdetectors/package.py
@@ -17,6 +17,9 @@ class Fccdetectors(CMakePackage, Key4hepPackage):
     version("0.1pre07", tag="v0.1pre07")
     version("0.1pre06", tag="v0.1pre06")
 
+    patch('https://patch-diff.githubusercontent.com/raw/HEP-FCC/FCCDetectors/pull/38.patch', when='@0.1pre09',
+          sha256='ef8b377940415818394ea25fc47cd31a4e2732910d344ec59aa736eb7b72c287')
+
     depends_on('dd4hep')
     depends_on('lcgeo')
     depends_on('lcio')
